#!/usr/bin/env python3
"""
Build to Binary Converter
Converts mikobench/dist/index.html to C++ binary resources (webapp.cpp, webapp.hpp)
"""

import os
import sys
from pathlib import Path

def read_binary_file(file_path):
    """Read file as binary data"""
    with open(file_path, 'rb') as f:
        return f.read()

def bytes_to_cpp_array(data, var_name):
    """Convert binary data to C++ byte array"""
    cpp_array = f"const unsigned char {var_name}[] = {{\n"
    
    # Format bytes in groups of 16 per line
    for i in range(0, len(data), 16):
        line = "    "
        chunk = data[i:i+16]
        for j, byte in enumerate(chunk):
            line += f"0x{byte:02x}"
            if i + j < len(data) - 1:  # Not the last byte
                line += ", "
        cpp_array += line + "\n"
    
    cpp_array += "};\n"
    cpp_array += f"const unsigned int {var_name}_size = {len(data)};\n"
    return cpp_array

def generate_header_file(output_path):
    """Generate webapp.hpp header file"""
    header_content = """#pragma once

// Auto-generated binary resources from mikobench/dist/index.html
// Do not edit this file manually

extern const unsigned char webapp_html[];
extern const unsigned int webapp_html_size;

// Function to get the embedded HTML content
const char* GetWebAppHTML();
unsigned int GetWebAppHTMLSize();
"""
    
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(header_content)

def generate_cpp_file(html_data, output_path):
    """Generate webapp.cpp implementation file"""
    cpp_array = bytes_to_cpp_array(html_data, "webapp_html")
    
    cpp_content = f"""#include "webapp.hpp"

// Auto-generated binary resources from mikobench/dist/index.html
// Do not edit this file manually

{cpp_array}
const char* GetWebAppHTML() {{
    return reinterpret_cast<const char*>(webapp_html);
}}

unsigned int GetWebAppHTMLSize() {{
    return webapp_html_size;
}}
"""
    
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(cpp_content)

def main():
    # Get script directory
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    
    # Input file path
    html_file = project_root / "mikobench" / "dist" / "index.html"
    
    # Output file paths
    app_dir = project_root / "app"
    cpp_file = app_dir / "webapp.cpp"
    hpp_file = app_dir / "webapp.hpp"
    
    # Check if input file exists
    if not html_file.exists():
        print(f"Error: Input file not found: {html_file}")
        print("Please build the mikobench project first using 'bun run build'")
        sys.exit(1)
    
    # Create app directory if it doesn't exist
    app_dir.mkdir(exist_ok=True)
    
    print(f"Reading HTML file: {html_file}")
    html_data = read_binary_file(html_file)
    
    print(f"Generating header file: {hpp_file}")
    generate_header_file(hpp_file)
    
    print(f"Generating implementation file: {cpp_file}")
    generate_cpp_file(html_data, cpp_file)
    
    print(f"\nConversion completed successfully!")
    print(f"Generated files:")
    print(f"  - {hpp_file} ({hpp_file.stat().st_size} bytes)")
    print(f"  - {cpp_file} ({cpp_file.stat().st_size} bytes)")
    print(f"\nHTML data size: {len(html_data)} bytes")
    
    print(f"\nTo use in your C++ code:")
    print(f"  #include \"webapp.hpp\"")
    print(f"  const char* html = GetWebAppHTML();")
    print(f"  unsigned int size = GetWebAppHTMLSize();")

if __name__ == "__main__":
    main()